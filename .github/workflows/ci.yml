# 각 서비스 레포의 .github/workflows/ci.yml

name: Build and Deploy

on:
  push:
    branches: [main, master]

env:
  REGISTRY: docker.io
  IMAGE_NAME: dokbawi/${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create config-prod.json
        run: |
          echo '${{ secrets.CONFIG_PROD_JSON }}' > config-prod.json

      - name: Generate unique image tag
        id: tag
        run: |
          # 고유한 태그 생성 (타임스탬프 + 커밋 해시)
          TAG="v$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-helm-chart:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Update Helm Chart repository
        run: |
          # Helm Charts 레포지토리 클론
          git clone https://${{ secrets.HELM_REPO_TOKEN }}@github.com/${{ secrets.HELM_REPO }}.git helm-repo
          cd helm-repo

          # 현재 서비스명 추출
          SERVICE_NAME="${{ github.event.repository.name }}"

          # 새 이미지 태그로 values.yaml 업데이트
          if [[ -f "charts/${SERVICE_NAME}/values.yaml" ]]; then
            # image.tag 업데이트
            sed -i "s|tag: .*|tag: \"${{ needs.build.outputs.image-tag }}\"|g" "charts/${SERVICE_NAME}/values.yaml"
            
            # Chart.yaml의 appVersion도 업데이트
            sed -i "s|appVersion: .*|appVersion: \"${{ needs.build.outputs.image-tag }}\"|g" "charts/${SERVICE_NAME}/Chart.yaml"
            
            echo "Updated ${SERVICE_NAME} chart:"
            echo "  - Image tag: ${{ needs.build.outputs.image-tag }}"
            echo "  - App version: ${{ needs.build.outputs.image-tag }}"
          else
            echo "❌ Chart not found for ${SERVICE_NAME}"
            exit 1
          fi

          # Git 설정
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # 변경사항 커밋
          git add .
          if git commit -m "🚀 Update ${SERVICE_NAME} to ${{ needs.build.outputs.image-tag }}

          - Docker image: dokbawi/${SERVICE_NAME}:${{ needs.build.outputs.image-tag }}
          - Commit: ${{ github.sha }}
          - Triggered by: ${{ github.actor }}"; then
            git push
            echo "✅ Helm chart updated successfully"
          else
            echo "ℹ️ No changes to commit"
          fi

  notify:
    needs: [build, update-helm-chart]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Discord success notification
        if: needs.build.result == 'success' && needs.update-helm-chart.result == 'success'
        run: |
          curl -H "Content-Type: application/json" \
               -d "{
                 \"embeds\": [{
                   \"title\": \"✅ 배포 성공: ${{ github.event.repository.name }}\",
                   \"description\": \"새 버전이 빌드되고 Helm 차트가 업데이트되었습니다.\",
                   \"color\": 5763719,
                   \"fields\": [
                     {\"name\": \"🏷️ 이미지 태그\", \"value\": \"\`${{ needs.build.outputs.image-tag }}\`\", \"inline\": true},
                     {\"name\": \"📦 커밋\", \"value\": \"\`${{ github.sha }}\`\", \"inline\": true},
                     {\"name\": \"👤 작성자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                     {\"name\": \"🚀 상태\", \"value\": \"ArgoCD에서 자동 배포가 시작됩니다.\", \"inline\": false}
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                 }]
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Discord failure notification
        if: needs.build.result == 'failure' || needs.update-helm-chart.result == 'failure'
        run: |
          curl -H "Content-Type: application/json" \
               -d "{
                 \"embeds\": [{
                   \"title\": \"❌ 배포 실패: ${{ github.event.repository.name }}\",
                   \"description\": \"빌드 또는 차트 업데이트에 실패했습니다.\",
                   \"color\": 15158332,
                   \"fields\": [
                     {\"name\": \"📦 커밋\", \"value\": \"\`${{ github.sha }}\`\", \"inline\": true},
                     {\"name\": \"👤 작성자\", \"value\": \"${{ github.actor }}\", \"inline\": true},
                     {\"name\": \"🔍 상태\", \"value\": \"GitHub Actions 로그를 확인해주세요.\", \"inline\": false}
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%S.000Z)\"
                 }]
               }" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
