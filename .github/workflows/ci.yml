name: Build and Deploy

on:
  push:
    branches: [main, master]

env:
  IMAGE_NAME: dokbawi/${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.tag.outputs.tag }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create config-prod.json
        run: |
          echo '${{ secrets.CONFIG_PROD_JSON }}' > config-prod.json

      - name: Generate unique image tag
        id: tag
        run: |
          TAG="v$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}"
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ steps.tag.outputs.tag }}
            ${{ env.IMAGE_NAME }}:latest

  update-helm-chart:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Update Helm Chart
        run: |
          # Helm Charts 레포지토리 클론
          git clone https://${{ secrets.HELM_REPO_TOKEN }}@github.com/${{ secrets.HELM_REPO }}.git helm-repo
          cd helm-repo

          SERVICE_NAME="${{ github.event.repository.name }}"
          NEW_TAG="${{ needs.build.outputs.image-tag }}"

          # values.yaml에서 해당 서비스의 tag 업데이트
          case $SERVICE_NAME in
            "discord-bot")
              sed -i "/discordBot:/,/pullPolicy:/ s|tag: .*|tag: ${NEW_TAG}|" values.yaml
              ;;
            "winter-cat-video")
              sed -i "/winterCatVideo:/,/pullPolicy:/ s|tag: .*|tag: ${NEW_TAG}|" values.yaml
              ;;
            "codex-media")
              sed -i "/codexMedia:/,/pullPolicy:/ s|tag: .*|tag: ${NEW_TAG}|" values.yaml
              ;;
          esac

          # Chart.yaml 버전 업데이트
          CHART_VERSION="0.1.$(date +%Y%m%d%H%M%S)"
          sed -i "s|version: .*|version: ${CHART_VERSION}|g" Chart.yaml
          sed -i "s|appVersion: .*|appVersion: \"${NEW_TAG}\"|g" Chart.yaml

          # Git 커밋
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update ${SERVICE_NAME} to ${NEW_TAG}" || exit 0
          git push

          echo "✅ Updated ${SERVICE_NAME} to ${NEW_TAG}"

  notify:
    needs: [build, update-helm-chart]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Discord notification
        if: needs.build.result == 'success' && needs.update-helm-chart.result == 'success'
        run: |
          curl -H "Content-Type: application/json" \
               -d "{\"content\":\"✅ **${{ github.event.repository.name }}** 새 버전 배포!\n📦 Tag: \`${{ needs.build.outputs.image-tag }}\`\n🚀 ArgoCD 자동 배포 중...\"}" \
               ${{ secrets.DISCORD_WEBHOOK_URL }}
